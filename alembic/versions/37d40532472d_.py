"""empty message

Revision ID: 37d40532472d
Revises: 
Create Date: 2023-08-02 20:46:39.947899

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
import logging
from app.decorators import log_start_end
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = "37d40532472d"
down_revision = None
branch_labels = None
depends_on = None

logger = logging.getLogger(__name__)


@log_start_end(log=logger)
def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "dim_countries",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("country_id", sa.Integer(), nullable=False),
        sa.Column("country", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("code", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("currency", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.PrimaryKeyConstraint("country_id"),
    )
    op.create_index(
        op.f("ix_dim_countries_country"), "dim_countries", ["country"], unique=False
    )
    op.create_table(
        "dim_data_vendor",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("website_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("support_email", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "dim_macro_parameters",
        sa.Column("description", mysql.TEXT(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("period", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "fact_economic_calendar",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("date", sa.DateTime(), nullable=True),
        sa.Column("time", sa.DateTime(), nullable=True),
        sa.Column("country", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("event", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("actual", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("consensus", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("previous", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "fact_macro_indicators",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("date", sa.DateTime(), nullable=True),
        sa.Column("country", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("variable", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("value", sa.Integer(), nullable=True),
        sa.Column("unit", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "currency_or_measurement", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "fact_news",
        sa.Column("description", mysql.LONGTEXT(), nullable=True),
        sa.Column("url", mysql.TEXT(), nullable=True),
        sa.Column("content", mysql.LONGTEXT(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("symbol", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("author", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("urlToImage", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("publishedAt", sa.DateTime(), nullable=True),
        sa.Column("source_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("source_name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        comment="List of news of public listed companies",
    )
    op.create_table(
        "fundamentals",
        sa.Column("longBusinessSummary", mysql.LONGTEXT(), nullable=True),
        sa.Column("companyOfficers", mysql.TEXT(), nullable=True),
        sa.Column("marketCap", mysql.BIGINT(), nullable=True),
        sa.Column("floatShares", mysql.BIGINT(), nullable=True),
        sa.Column("sharesOutstanding", mysql.BIGINT(), nullable=True),
        sa.Column("impliedSharesOutstanding", mysql.BIGINT(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("symbol", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("address1", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("city", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("state", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("zip_code", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("country", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("phone", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("website", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("industry", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("industryDisp", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("sector", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("fullTimeEmployees", sa.Integer(), nullable=True),
        sa.Column("auditRisk", sa.Integer(), nullable=True),
        sa.Column("boardRisk", sa.Integer(), nullable=True),
        sa.Column("compensationRisk", sa.Integer(), nullable=True),
        sa.Column("shareHolderRightsRisk", sa.Integer(), nullable=True),
        sa.Column("overallRisk", sa.Integer(), nullable=True),
        sa.Column(
            "governanceEpochDate", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "compensationAsOfEpochDate",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=True,
        ),
        sa.Column("maxAge", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("priceHint", sa.Integer(), nullable=True),
        sa.Column("previousClose", sa.Float(), nullable=True),
        sa.Column("open", sa.Float(), nullable=True),
        sa.Column("dayLow", sa.Float(), nullable=True),
        sa.Column("dayHigh", sa.Float(), nullable=True),
        sa.Column("regularMarketPreviousClose", sa.Float(), nullable=True),
        sa.Column("regularMarketOpen", sa.Float(), nullable=True),
        sa.Column("regularMarketDayLow", sa.Float(), nullable=True),
        sa.Column("regularMarketDayHigh", sa.Float(), nullable=True),
        sa.Column("dividendRate", sa.Float(), nullable=True),
        sa.Column("dividendYield", sa.Float(), nullable=True),
        sa.Column("exDividendDate", sa.DateTime(), nullable=True),
        sa.Column("payoutRatio", sa.Float(), nullable=True),
        sa.Column("fiveYearAvgDividendYield", sa.Float(), nullable=True),
        sa.Column("beta", sa.Float(), nullable=True),
        sa.Column("trailingPE", sa.Float(), nullable=True),
        sa.Column("forwardPE", sa.Float(), nullable=True),
        sa.Column("volume", sa.Integer(), nullable=True),
        sa.Column("regularMarketVolume", sa.Integer(), nullable=True),
        sa.Column("averageVolume", sa.Integer(), nullable=True),
        sa.Column("averageVolume10days", sa.Integer(), nullable=True),
        sa.Column("averageDailyVolume10Day", sa.Integer(), nullable=True),
        sa.Column("bid", sa.Float(), nullable=True),
        sa.Column("ask", sa.Float(), nullable=True),
        sa.Column("bidSize", sa.Integer(), nullable=True),
        sa.Column("askSize", sa.Integer(), nullable=True),
        sa.Column("fiftyTwoWeekLow", sa.Float(), nullable=True),
        sa.Column("fiftyTwoWeekHigh", sa.Float(), nullable=True),
        sa.Column("priceToSalesTrailing12Months", sa.Float(), nullable=True),
        sa.Column("fiftyDayAverage", sa.Float(), nullable=True),
        sa.Column("twoHundredDayAverage", sa.Float(), nullable=True),
        sa.Column("trailingAnnualDividendRate", sa.Float(), nullable=True),
        sa.Column("trailingAnnualDividendYield", sa.Float(), nullable=True),
        sa.Column("currency", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("enterpriseValue", sa.Float(), nullable=True),
        sa.Column("profitMargins", sa.Float(), nullable=True),
        sa.Column("sharesShort", sa.Integer(), nullable=True),
        sa.Column("sharesShortPriorMonth", sa.Integer(), nullable=True),
        sa.Column("sharesShortPreviousMonthDate", sa.Integer(), nullable=True),
        sa.Column("dateShortInterest", sa.DateTime(), nullable=True),
        sa.Column("sharesPercentSharesOut", sa.Float(), nullable=True),
        sa.Column("heldPercentInsiders", sa.Float(), nullable=True),
        sa.Column("heldPercentInstitutions", sa.Float(), nullable=True),
        sa.Column("shortRatio", sa.Float(), nullable=True),
        sa.Column("shortPercentOfFloat", sa.Float(), nullable=True),
        sa.Column("bookValue", sa.Float(), nullable=True),
        sa.Column("priceToBook", sa.Float(), nullable=True),
        sa.Column("lastFiscalYearEnd", sa.Float(), nullable=True),
        sa.Column("nextFiscalYearEnd", sa.Float(), nullable=True),
        sa.Column("mostRecentQuarter", sa.Float(), nullable=True),
        sa.Column("earningsQuarterlyGrowth", sa.Float(), nullable=True),
        sa.Column("netIncomeToCommon", sa.Float(), nullable=True),
        sa.Column("trailingEps", sa.Float(), nullable=True),
        sa.Column("forwardEps", sa.Float(), nullable=True),
        sa.Column("pegRatio", sa.Float(), nullable=True),
        sa.Column("lastSplitFactor", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("lastSplitDate", sa.DateTime(), nullable=True),
        sa.Column("enterpriseToRevenue", sa.Float(), nullable=True),
        sa.Column("enterpriseToEbitda", sa.Float(), nullable=True),
        sa.Column("FiftyTwoWeekChange", sa.Float(), nullable=True),
        sa.Column("SandP52WeekChange", sa.Float(), nullable=True),
        sa.Column("lastDividendValue", sa.Float(), nullable=True),
        sa.Column("lastDividendDate", sa.DateTime(), nullable=True),
        sa.Column("exchange", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("quoteType", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "underlyingSymbol", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column("shortName", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("longName", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "firstTradeDateEpochUtc", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "timeZoneFullName", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "timeZoneShortName", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column("uuid", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("messageBoardId", sa.Integer(), nullable=True),
        sa.Column("gmtOffSetMilliseconds", sa.Integer(), nullable=True),
        sa.Column("currentPrice", sa.Float(), nullable=True),
        sa.Column("targetHighPrice", sa.Float(), nullable=True),
        sa.Column("targetLowPrice", sa.Float(), nullable=True),
        sa.Column("targetMeanPrice", sa.Float(), nullable=True),
        sa.Column("targetMedianPrice", sa.Float(), nullable=True),
        sa.Column("recommendationMean", sa.Float(), nullable=True),
        sa.Column("recommendationKey", sa.Float(), nullable=True),
        sa.Column("numberOfAnalystOpinions", sa.Float(), nullable=True),
        sa.Column("totalCash", sa.Float(), nullable=True),
        sa.Column("totalCashPerShare", sa.Float(), nullable=True),
        sa.Column("ebitda", sa.Float(), nullable=True),
        sa.Column("totalDebt", sa.Float(), nullable=True),
        sa.Column("quickRatio", sa.Float(), nullable=True),
        sa.Column("currentRatio", sa.Float(), nullable=True),
        sa.Column("totalRevenue", sa.Float(), nullable=True),
        sa.Column("debtToEquity", sa.Float(), nullable=True),
        sa.Column("revenuePerShare", sa.Float(), nullable=True),
        sa.Column("returnOnAssets", sa.Float(), nullable=True),
        sa.Column("returnOnEquity", sa.Float(), nullable=True),
        sa.Column("grossProfits", sa.Float(), nullable=True),
        sa.Column("freeCashflow", sa.Float(), nullable=True),
        sa.Column("operatingCashflow", sa.Float(), nullable=True),
        sa.Column("earningsGrowth", sa.Float(), nullable=True),
        sa.Column("revenueGrowth", sa.Float(), nullable=True),
        sa.Column("grossMargins", sa.Float(), nullable=True),
        sa.Column("ebitdaMargins", sa.Float(), nullable=True),
        sa.Column("operatingMargins", sa.Float(), nullable=True),
        sa.Column(
            "financialCurrency", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "trailingPegRatio", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column("fax", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("symbol", name="symbol"),
    )
    op.create_table(
        "test",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "dim_companies",
        sa.Column("summary", mysql.TEXT(), nullable=True),
        sa.Column("website", mysql.TEXT(), nullable=True),
        sa.Column("market_cap", mysql.VARCHAR(length=255), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("symbol", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("currency", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("sector", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("industry_group", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("industry", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("exchange", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("market", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("country", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("state", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("city", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("zipcode", sa.Integer(), nullable=True),
        sa.Column("isin", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("cusip", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("figi", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("composite_figi", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("shareclass_figi", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["country"],
            ["dim_countries.country"],
        ),
        sa.PrimaryKeyConstraint("id"),
        comment="List of public listed companies",
    )
    op.create_index(
        op.f("ix_dim_companies_symbol"), "dim_companies", ["symbol"], unique=False
    )
    op.create_table(
        "fact_daily_price",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("data_vendor_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("date", sa.DateTime(), nullable=False),
        sa.Column("symbol", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("open", sa.Float(), nullable=True),
        sa.Column("high", sa.Float(), nullable=True),
        sa.Column("low", sa.Float(), nullable=True),
        sa.Column("close", sa.Float(), nullable=True),
        sa.Column("adj_close", sa.Float(), nullable=True),
        sa.Column("volume", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_vendor_id"],
            ["dim_data_vendor.id"],
        ),
        sa.ForeignKeyConstraint(
            ["symbol"],
            ["dim_companies.symbol"],
        ),
        sa.PrimaryKeyConstraint("id"),
        comment="Daily stock price of public listed companies",
    )
    # ### end Alembic commands ###


@log_start_end(log=logger)
def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("fact_daily_price")
    op.drop_index(op.f("ix_dim_companies_symbol"), table_name="dim_companies")
    op.drop_table("dim_companies")
    op.drop_table("test")
    op.drop_table("fundamentals")
    op.drop_table("fact_news")
    op.drop_table("fact_macro_indicators")
    op.drop_table("fact_economic_calendar")
    op.drop_table("dim_macro_parameters")
    op.drop_table("dim_data_vendor")
    op.drop_index(op.f("ix_dim_countries_country"), table_name="dim_countries")
    op.drop_table("dim_countries")
    # ### end Alembic commands ###
